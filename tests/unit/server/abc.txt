import { jest, expect, describe, test, beforeEach } from '@jest/globals';
import fs from 'fs';
import { join } from 'path';
import { Stream } from 'stream';
import config from '../../../server/config.js';
import { Service } from '../../../server/service.js';
import TestUtil from '../_util/testUtil.js';

const {
  dir: { root },
  pages,
} = config;

describe('#Service - test suit for service functions', () => {
  const service = new Service();

  beforeEach(() => {
    jest.resetAllMocks();
    jest.clearAllMocks();
  });

  test('getFileInfo() - Should return type and stream given a file', async () => {
    const fileInfo = await service.getFileInfo(pages.homeHTML);

    expect(fileInfo).toBeDefined();
    expect(fileInfo).toEqual({
      type: '.html',
      name: join(root, 'public/home/index.html'),
    });
  });

  test('getFileStream() - Should return a type and name given a file', async () => {
    const mockFileStream = TestUtil.generateReadableStream(['anything']);
    const fullFilePath = join(root, 'public/controller/index.html');

    jest.spyOn(Service.prototype, 'getFileInfo').mockResolvedValue({
      type: '.html',
      fullFilePath,
    });

    jest
      .spyOn(Service.prototype, 'createFileStream')
      .mockReturnValue(mockFileStream);

    service.createFileStream(pages.controllerHTML);
    const fileStream = await service.getFileStream(pages.controllerHTML);

    expect(Service.prototype.createFileStream).toHaveBeenCalledWith(
      fullFilePath
    );
    expect(Service.prototype.getFileInfo).toHaveBeenCalledWith(
      pages.controllerHTML
    );
    expect(fileStream).toEqual({ stream: expect.any(Stream), type: '.html' });
  });

  test('should return a fileStream', async () => {
    const filename = 'help-ukraine.html';

    const mockReadableStream = TestUtil.generateReadableStream([
      '<h1>Help</h1>',
    ]);

    jest
      .spyOn(fs, fs.createReadStream.name)
      .mockReturnValue(mockReadableStream);

    const result = await service.createFileStream(filename);

    expect(fs.createReadStream).toHaveBeenCalledWith(filename);
    expect(result).toEqual(mockReadableStream);
  });

  // test('createFileStream() - Should create a fileStream', async () => {
  //   const service = new Service();
  //   const fullFileName = join(root, 'public/home/index.html');

  //   const test = service.createFileStream(fullFileName);
  // });
});
